import os
from tensorboard.backend.event_processing import event_accumulator
import numpy as np

# Returns the highest mean of the ep_rew_mean from the tensorboard log
def get_highest_ep_rew_mean(log_dir):
    event_file = None
    for file in os.listdir(log_dir):
        if file.startswith("events.out.tfevents"):
            event_file = os.path.join(log_dir, file)
            break

    if not event_file:
        return None

    ea = event_accumulator.EventAccumulator(event_file)
    ea.Reload()

    ep_rew_mean = ea.scalars.Items("rollout/ep_rew_mean")

    if not ep_rew_mean:
        return None

    return max([item.value for item in ep_rew_mean])

# Calculates the variance of an array
def variance(arr, mean):
    n = len(arr)
    if n < 2:
        raise ValueError("Array must have at least 2 elements")
    variance = sum((x - mean) ** 2 for x in arr) / (n - 1)
    return variance

# Datapoints
n1 = []
n2 = []

# Recorded Datapoints
# n1 = [[-73.00370653143325, -103.93404303308232, -123.54749530132905, -74.45299910920181, -156.2555449837341, -153.1077933075576, -167.83880589187788, -109.25373873407604, -106.63541436868788, -73.25718170092807], [-96.28120180354215, -96.79490586265138, -99.26396516598983, -97.03556439714457, -95.96387980546649, -95.46099113433532, -95.40480917320656, -95.25771185665853, -95.33147740001566, -95.55690744057462], [-99.68225300543018, -103.90505337162911, -115.711978933488, -106.00850397400484, -57.87069435351069, -78.41436889648166, -93.91144634277448, -53.86166935472659, -101.0800886114339, -79.73587104483256], [-96.00038779862331, -96.15554393800288, -96.50120356142527, -97.75035770008905, -96.8697212712591, -102.77442022353557, -99.91373063781998, -96.3186904747829, -99.52553267455455, -100.48730887955442], [-79.11811479716522, -71.98828956646388, -84.53888789562801, -98.42758399852322, -93.11947380432834, -102.66806121481527, -98.01101552011808, -89.23593850771444, -93.14884524070469, -63.28747246399853], [-64.80030853291845, -151.03185207741487, -156.2283317483409, -137.46574717396922, -131.88916255305233, -142.12902749206313, -129.49734192451865, -140.01038724925152, -119.08488992877228, -136.77315530293893], [-98.31855105153493, -91.53450862503655, -112.14438354644024, -160.83817715001433, -121.60161267006835, -126.3256424492551, -125.917924465284, -126.82294537576406, -56.963156548099924, -125.53947533240593], [-101.63943077073885, -108.95115907941317, -110.37830128346174, -126.47093225444051, -121.09224735497094, -86.83603106173977, -78.06850268473319, -81.11935702476491, -27.93086659236667, -45.77297401991925], [-63.33349896781804, -119.03472728058922, -138.56067540082756, -101.33496047558253, -97.12450347997459, -71.8078754003535, -98.26341036096464, -105.6094375787521, -112.85702831994915, -107.0555835836338], [-96.41130551442755, -127.43496901233401, -110.62093908720601, -101.3278911332934, -87.71688744030719, -74.56242675598342, -94.30161407353704, -121.37245919957907, -116.99034165403644, -80.41245828720449], [-116.99071904724218, -142.60271620174083, -133.69138794214982, -138.79649432032463, -152.4490883693924, -124.60721281661898, -156.1988811367184, -92.80865621677818, -23.288424327646926, -122.79804504903963], [-105.22087860382955, -96.25606392132177, -101.13329695866896, -106.8286721684188, -117.17732988290878, -101.48902199172272, -113.67823914883782, -106.86613914712957, -120.11157982320401, -77.09041994616261], [-99.34937827557677, -105.3228700281203, -121.87467559483548, -112.18501122933735, -98.68666567935445, -126.7326811070365, -130.28184086523697, -131.75470665031608, -114.00336536489196, -112.8291839061457], [-96.46565006077151, -96.46528361460923, -96.29937793047172, -96.2648335773315, -96.31671546036502, -96.31263754662884, -96.35581654838593, -96.4085855256932, -96.01041094758472, -96.1506498836486], [-101.76836379267672, -100.43863562109782, -102.79505789575028, -101.12120729248498, -106.67782343985425, -99.15833895232743, -97.7591787223754, -98.07321131831166, -100.5471881533292, -98.10538965456102], [-95.64035837419699, -96.26478271151292, -110.52712643160567, -117.48806947726133, -117.38345931694886, -125.35096349113503, -118.01512558333566, -122.98020394805144, -123.4615585332574, -107.72164885030939], [-96.97279395626225, -145.36100157616875, -146.73513648692048, -132.249972852468, -103.91538008365934, -97.32185857969631, -98.79938201608302, -112.4455202575841, -116.87527648051908, -121.66748133757038]]
# n2 = [[-40.82557984869842, -148.29042928942405, -118.45930362049076, -82.46718082894328, -103.95202967444807, -81.31641783506501, -95.5113479694849, -132.46028406467656, -125.68774404126663, -119.72804901813817], [-125.07075607294898, -104.57207632039143, -131.81015002213599, -97.68800810639213, -100.88450832757265, -77.73298980138408, -104.27736565622382, -136.92999957562927, -141.46200155807352, -91.73844337394603], [-95.8840375524375, -58.79565652984627, -96.94792881515558, -133.22717507276056, -121.15391543405588, -120.93235750815383, -127.69702985789786, -116.27955852652526, -107.72579020334467, -83.39688139488436], [-96.42611910188043, -96.07589874070328, -102.3104382439634, -95.67512269723261, -95.36594571330458, -95.7256098025169, -98.5630204737106, -96.09660379367739, -103.2387792608619, -96.49222180518778], [-93.36413004614117, -98.47968778125748, -99.31795199404893, -107.54913006969771, -138.87626732235663, -137.53399419869683, -137.11581269963983, -135.19287421817486, -96.79924118283203, -145.49403448114128], [-92.90629653669463, -102.23356019904394, -94.05135940072874, -91.51392876037096, -106.71427992794479, -84.09670536894515, -65.7868798157541, -51.353819627805876, -70.02021323650361, -85.2435658031985], [-98.16473464055902, -101.39622003830395, -96.74050031305701, -130.14190503504616, -153.6278755564873, -95.40936260465567, -68.89295736433613, -109.06580767897594, -55.015785233486895, -68.8179885092607], [-96.42569860274166, -108.15978385985686, -117.29004877017609, -151.20380538669107, -115.52623505080595, -112.14581393858509, -118.0645304506578, -115.18036962827205, -45.77064473248688, -41.240582778610076], [-54.851481009897974, -155.77801064331615, -122.92681613741053, -130.82159029801053, -159.20691269308603, -112.53504862109007, -118.12659195791862, -23.573095469228303, -20.26366535470239, -20.296017918788934], [-95.75910858002977, -98.1295913659626, -95.7312076417506, -95.9788441445438, -95.74577920245747, -94.23348995716357, -94.96839871502853, -100.54941968091318, -116.45786117468914, -119.3496899193406], [-96.00159040248263, -99.1250728297667, -96.2528540048014, -95.86476727216429, -99.39621194544121, -96.07600178308591, -95.7739842943168, -96.00108012451038, -96.6184014229731, -99.84640412846694], [-100.75782368126134, -96.4362333967635, -96.53255475550445, -95.66324839431302, -119.2438303235959, -139.03114751843216, -100.72186672363843, -95.40416474954962, -55.515517316341594, -109.35085187019912], [-98.74845547780825, -104.80303586984513, -110.30356433799022, -114.46593805873657, -21.20489176546904, -83.18882330720201, -116.07890128556535, -113.02730128149291, -123.09808909967147, -115.55354418966316], [-95.68316598456101, -83.87444981416614, -65.1947874786605, -87.50442419855547, -66.5597563105773, -90.00204898007355, -72.41213611755514, -103.33706114119646, -74.20423280861463, -94.46883571652984]]

# iterate over all runs
for i in range(100):
    tmp_path = "./tmp/tb/powertest/" + "Gruppe1_Run" + str(i)
    if os.path.exists(tmp_path):
        highest_ep_rew_mean = get_highest_ep_rew_mean(tmp_path)
        n1.append(highest_ep_rew_mean)

for i in range(100):
    tmp_path = "./tmp/tb/powertest/" + "Gruppe2_Run" + str(i)
    if os.path.exists(tmp_path):
        highest_ep_rew_mean = get_highest_ep_rew_mean(tmp_path)
        n2.append(highest_ep_rew_mean)

# Calculate the mean
mean_n1 = np.mean(n1)
mean_n2 = np.mean(n2)

# Calculate the variance
var_n1 = variance(n1, mean_n1)
var_n2 = variance(n2, mean_n2)


# calculate pooled variance
pooled_variance = (((len(n1) - 1) * var_n1) + ((len(n2) - 1) * var_n2)) / (len(n1) + len(n2) - 2)

# calculate pooled standard deviation
SD_pooled = np.sqrt(pooled_variance)
effect_size = np.abs(mean_n1 - mean_n2) / SD_pooled

# Output
print("N1:", "(",len(n1),")",n1)
print("N2:", "(",len(n2),")",n2)
print("Mean n1:", mean_n1)
print("Mean n2:", mean_n2)
print("Varianz n1:", var_n1)
print("Varianz n2:", var_n2)
print("Gepoolte Standardabweichung (SD_pooled):", SD_pooled)
print("Effect Size:", effect_size)